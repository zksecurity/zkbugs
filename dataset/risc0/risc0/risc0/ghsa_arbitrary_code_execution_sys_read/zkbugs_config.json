{
  "Arbitrary code execution in guest via memory safety failure in sys_read": {
    "Id": "risc0/risc0/ghsa-jqq4-c7wq-36h7",
    "Project": "https://github.com/risc0/risc0",
    "Commit": "4d8e77965038164ff3831eb42f5d542ab9485680",
    "Fix Commit": "6506123691a5558cba1d2f4b7af734f0367bc6d1",
    "DSL": "risc0",
    "Vulnerability": "Memory Safety",
    "Impact": "Soundness",
    "Root Cause": "Implementation Bug",
    "Reproduced": true,
    "Location": {
      "Path": "risc0/zkos/v1compat/src/main.rs, risc0/zkos/v1compat/src/kernel.s, risc0/zkvm/platform/src/syscall.rs",
      "Function": "assert_user_raw_slice, _ecall_software, sys_read",
      "Line": "82, 492, 506 (main.rs - assert_user_raw_slice definition and usage)"
    },
    "Source": {
      "GitHub Security Advisory": {
        "Source Link": "https://github.com/risc0/risc0/security/advisories/GHSA-jqq4-c7wq-36h7",
        "Bug ID": "GHSA-jqq4-c7wq-36h7"
      }
    },
    "Commands": {
      "Setup Environment": "./zkbugs_setup.sh",
      "Reproduce": "./zkbugs_exploit.sh",
      "Compile and Preprocess": "./zkbugs_compile_setup.sh",
      "Positive Test": "./zkbugs_positive_test.sh",
      "Find Exploit": "./zkbugs_find_exploit.sh",
      "Clean": "./zkbugs_clean.sh"
    },
    "Short Description of the Vulnerability": "In risc0-zkvm-platform, when the zkVM guest calls sys_read, the host can use a crafted response to write to an arbitrary memory location in the guest due to vulnerable pointer arithmetic. This allows arbitrary code execution within the guest, critically compromising soundness guarantees. All guest programs built with affected versions (risc0-zkvm < 2.3.2 and < 3.0.3) are vulnerable.",
    "Short Description of the Exploit": "Not reproduced - no test case available. Would require a malicious host to craft responses to sys_read that exploit vulnerable pointer arithmetic to write to arbitrary guest memory.",
    "Proposed Mitigation": "Fix applied in PR #3351: remove vulnerable pointer arithmetic and replace with simplified implementation in v1compat kernel using Rust's slice functions to guarantee memory safety. Fixed in risc0-zkvm versions 2.3.2 and 3.0.3."
  }
}
