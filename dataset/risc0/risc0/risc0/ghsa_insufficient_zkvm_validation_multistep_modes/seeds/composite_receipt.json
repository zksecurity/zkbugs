{
  "bug_id": "GHSA-5c79-r6x7-3jx9",
  "description": "Missing verify_integrity_with_context calls in Receipt enum",
  "commits": {
    "vulnerable": "2b50e65cb1a6aba413c24d89fea6bac7eb0f422c",
    "fixed": "0948e2f780aba50861c95437cf54db420ffb5ad5"
  },
  "oracle": {
    "type": "static_analysis",
    "function": "oracle_receipt_integrity_validation",
    "returns": "true if vulnerable (missing checks), false if fixed"
  },
  "test_cases": [
    {
      "name": "vulnerable_all_missing",
      "description": "All receipt types missing integrity checks",
      "pattern": "Self::Composite(inner) => Ok(())",
      "expected_vulnerable": true,
      "expected_fixed": false
    },
    {
      "name": "vulnerable_composite_missing",
      "description": "Only Composite missing integrity check",
      "pattern": "Self::Composite(inner) => Ok(())",
      "expected_vulnerable": true,
      "expected_fixed": false
    },
    {
      "name": "vulnerable_succinct_missing",
      "description": "Only Succinct missing integrity check",
      "pattern": "Self::Succinct(inner) => Ok(())",
      "expected_vulnerable": true,
      "expected_fixed": false
    },
    {
      "name": "vulnerable_groth16_missing",
      "description": "Only Groth16 missing integrity check",
      "pattern": "Self::Groth16(inner) => Ok(())",
      "expected_vulnerable": true,
      "expected_fixed": false
    },
    {
      "name": "fixed_all_present",
      "description": "All receipt types have integrity checks",
      "pattern": "inner.verify_integrity_with_context(ctx)",
      "expected_vulnerable": false,
      "expected_fixed": true
    },
    {
      "name": "fixed_composite_present",
      "description": "Composite has integrity check",
      "pattern": "Self::Composite(inner) => inner.verify_integrity_with_context(ctx)",
      "expected_vulnerable": false,
      "expected_fixed": true
    },
    {
      "name": "fixed_succinct_present",
      "description": "Succinct has integrity check",
      "pattern": "Self::Succinct(inner) => inner.verify_integrity_with_context(ctx)",
      "expected_vulnerable": false,
      "expected_fixed": true
    },
    {
      "name": "fixed_groth16_present",
      "description": "Groth16 has integrity check",
      "pattern": "Self::Groth16(inner) => inner.verify_integrity_with_context(ctx)",
      "expected_vulnerable": false,
      "expected_fixed": true
    }
  ],
  "mutation_strategies": [
    {
      "name": "remove_integrity_check",
      "description": "Remove inner.verify_integrity_with_context(ctx) call",
      "mutation": "Replace 'inner.verify_integrity_with_context(ctx)' with 'Ok(())'",
      "expected_result": "Should trigger oracle (vulnerability introduced)"
    },
    {
      "name": "add_integrity_check",
      "description": "Add inner.verify_integrity_with_context(ctx) call",
      "mutation": "Replace 'Ok(())' with 'inner.verify_integrity_with_context(ctx)'",
      "expected_result": "Should not trigger oracle (fix applied)"
    },
    {
      "name": "partial_fix",
      "description": "Fix only some receipt types",
      "mutation": "Apply fix to 1-2 receipt types, leave others vulnerable",
      "expected_result": "Should still trigger oracle (incomplete fix)"
    },
    {
      "name": "wrong_context",
      "description": "Call with wrong or no context parameter",
      "mutation": "Change 'inner.verify_integrity_with_context(ctx)' to 'inner.verify_integrity_with_context()'",
      "expected_result": "Should trigger oracle or fail to compile"
    }
  ],
  "fuzzing_hints": {
    "target_file": "risc0/zkvm/src/receipt.rs",
    "target_function": "verify_integrity_with_context",
    "focus_patterns": [
      "Self::Composite(inner) =>",
      "Self::Succinct(inner) =>",
      "Self::Groth16(inner) =>",
      "verify_integrity_with_context",
      "VerifierContext"
    ],
    "invariants": [
      "All 3 receipt types (Composite, Succinct, Groth16) must call inner.verify_integrity_with_context(ctx)",
      "VerifierContext must be propagated to inner receipts",
      "Fake receipts can return Ok(()) without validation (not cryptographic)",
      "Missing any integrity check makes the system vulnerable"
    ],
    "fuzzing_approach": "source_level",
    "expected_throughput": "<1ms per test (static analysis)",
    "coverage_target": "All receipt type match arms",
    "differential_oracle": true,
    "commit_range": {
      "start": "v1.1.0",
      "end": "v1.1.1",
      "known_vulnerable": "2b50e65cb1a6aba413c24d89fea6bac7eb0f422c",
      "known_fixed": "0948e2f780aba50861c95437cf54db420ffb5ad5"
    }
  },
  "interesting_cases": {
    "total_receipt_types": 4,
    "cryptographic_receipt_types": 3,
    "fake_receipt_exempt": true,
    "partial_fix_combinations": 7,
    "description": "7 combinations: 3 'only one fixed', 3 'only one broken', 1 'all broken'"
  },
  "fuzzing_campaigns": [
    {
      "name": "exhaustive_pattern_fuzzing",
      "description": "Test all 7 partial fix combinations",
      "duration": "< 10 seconds",
      "expected_coverage": "100% (all combinations testable)",
      "oracle_trigger_rate": "85.7% (6 out of 7 are vulnerable)"
    },
    {
      "name": "commit_bisect_fuzzing",
      "description": "Binary search through commit history",
      "commits_to_test": "~10-20 between v1.1.0 and v1.1.1",
      "expected_result": "Identify exact commit introducing/fixing bug",
      "oracle_behavior": "VULN before 0948e2f, FIXED after"
    },
    {
      "name": "source_mutation_fuzzing",
      "description": "Apply mutations to fixed source",
      "mutations_per_receipt_type": 4,
      "total_mutations": 12,
      "expected_detection_rate": "100% (all mutations should be caught)"
    }
  ],
  "libfuzzer_integration": {
    "harness": "tests/fuzz_receipt_integrity.rs",
    "corpus_dir": "seeds/",
    "dictionary": [
      "Self::Composite",
      "Self::Succinct",
      "Self::Groth16",
      "inner.verify_integrity_with_context",
      "Ok(())",
      "ctx",
      "VerifierContext"
    ],
    "max_len": 10000,
    "runs": 1000,
    "timeout": "1s",
    "expected_exec_per_sec": "1000+ (fast static analysis)"
  },
  "afl_integration": {
    "compile_command": "cargo afl build --release",
    "fuzz_command": "cargo afl fuzz -i seeds/ -o findings/ target/release/fuzz_receipt_integrity",
    "expected_behavior": "Quickly find all 7 vulnerable combinations",
    "optimization": "Use source-level fuzzing, not byte-level (structured input)"
  },
  "validation_strategy": {
    "step1": "Unit tests validate oracle correctness",
    "step2": "Harness tests validate pattern detection",
    "step3": "Fuzzing discovers edge cases and partial fixes",
    "step4": "Differential testing across commits confirms fix timeline"
  },
  "notes": {
    "fuzzing_value": "MEDIUM - Small input space (3 receipt types), but valuable for validation",
    "oracle_reliability": "HIGH - Static analysis is deterministic",
    "false_positive_risk": "LOW - Patterns are specific and unambiguous",
    "false_negative_risk": "LOW - All receipt types are explicitly checked",
    "generalization": "Pattern extends to other receipt validation bugs in zkVMs"
  }
}

