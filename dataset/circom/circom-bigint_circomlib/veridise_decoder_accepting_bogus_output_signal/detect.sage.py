

# This file was *autogenerated* from the file detect.sage
from sage.all_cmdline import *   # import sage library

_sage_const_21888242871839275222246405745257275088548364400416034343698204186575808495617 = Integer(21888242871839275222246405745257275088548364400416034343698204186575808495617); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)# SageMath script

# Prime number in circom
p = _sage_const_21888242871839275222246405745257275088548364400416034343698204186575808495617 
F = GF(p)

# Fixed values
inp = F(_sage_const_2 )  # inp is 2
w = _sage_const_4   # w is 4

# out should be [0, 0, 1, 0], but we are looking for a bogus value
# out = [0, 0, 0, 0]

success = _sage_const_0 

# Print the values
print(f"inp: {inp}")
print(f"w: {w}")
print(f"success: {success}")

"""
    for (var i=0; i<w; i++) {
        out[i] <-- (inp == i) ? 1 : 0;
        out[i] * (inp-i) === 0;
        lc = lc + out[i];
    }
"""
# Verify the constraint
lc = _sage_const_0 
out = []
constraint1_passes = True
for i in range(w):
    # We are not looking for correct witness...
    if i == _sage_const_2 :
        out.append(_sage_const_0 )
        continue
    
    if inp - i != _sage_const_0 :
        out.append(_sage_const_0 )
    else:
        out.append(_sage_const_1 )

    if out[i] * (inp - i) != _sage_const_0 :
        constraint1_passes = False
        print("constraint out[i] * (inp-i) === 0 fails")

    lc += out[i]

print(f"out: {out}")

constraint2_passes = (lc == success)
constraint3_passes = (success * (success - _sage_const_1 ) == _sage_const_0 )

if constraint1_passes and constraint2_passes and constraint3_passes:
    print(f"All constraints passed")

